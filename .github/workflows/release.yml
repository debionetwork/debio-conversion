name: Release

on:
  workflow_dispatch:
    inputs:
      release:
        description: "RELEASE"
        required: true
        type: string

concurrency:
  group: release

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.input-check.outputs.release_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: input check
        id: input-check
        shell: bash
        run: |
          RELEASE_INPUT="${{ inputs.release }}"
          RELEASE_NAME=${RELEASE_INPUT##* }

          echo "::set-output name=release_name::$RELEASE_NAME"
      - uses: cardinalby/git-get-release-action@v1
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseName: ${{ steps.input-check.outputs.release_name }}
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.get_release.outputs.id }}

  deploy-release:
    runs-on: ubuntu-20.04
    needs:
      - release
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            REDIS_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            COINMARKETCAP_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/COINMARKETCAP_HOST
            COINMARKETCAP_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/COINMARKETCAP_API_KEY
            SODAKI_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SODAKI_HOST
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-conversion debio/debio-conversion \
              --install \
              --set-string image.tag=${{ needs.release.outputs.release_name }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.coinMarketCap.host=${{ steps.secrets.outputs.COINMARKETCAP_HOST }} \
              --set-string config.coinMarketCap.apiKey="${{ steps.secrets.outputs.COINMARKETCAP_API_KEY }}" \
              --set-string config.sodaki.host=${{ steps.secrets.outputs.SODAKI_HOST }} \
              --set-string resources.requests.cpu=100m \
              --set-string resources.requests.memory=256Mi \
              --set-string resources.limits.cpu=300m \
              --set-string resources.limits.memory=512Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=20 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/debio-conversion
      - name: Sleuth webhook
        if: "${{ env.DEPLOY == 'true' }}"
        shell: bash
        run: |
          curl -X POST -d api_key=${{ secrets.SLEUTH_API_KEY }} \
          -d environment=${{ secrets.MAINNET_SLEUTH_ENVIRONMENT }} \
          -d sha=$GITHUB_SHA ${{ secrets.CONVERSION_SLEUTH_WEBHOOK }}
